<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ftp]]></title>
    <url>%2F2019%2F01%2F02%2Fftp%2F</url>
    <content type="text"><![CDATA[首先查看是否有安装vsftpd 1rpm -qa | grep vsftpd 没有就安装并开机启动 12yum -y install vsftpdchkconfig vsftpd on 因为ftp用户不必每个都是系统的真实用户所以采用虚拟用户配置ftp修改配置文件,打开/etc/vsftpd/vsftpd.conf,配置如下: 123456anonymous_enable=NO //设定不允许匿名访问local_enable=YES //设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为NO的情况下所有虚拟用户将无法访问chroot_list_enable=YES //使用户不能离开主目录ascii_upload_enable=YESascii_download_enable=YES //设定支持ASCII模式的上传和下载功能pam_service_name=vsftpd //PAM认证文件名。PAM将根据/etc/pam.d/vsftpd进行认证 下面设置是vsftpd虚拟用户重要配置 123guest_enable=YES //设定启用虚拟用户功能(手动添加,默认不包含这些设定)guest_username=ftp //指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了(手动添加,默认不包含这些设定)user_config_dir=/etc/vsftpd/vuser_conf //设定虚拟用户个人vsftp的CentOS FTP服务文件存放路径。存放虚拟用户个性的CentOS FTP服务文件(配置文件名=虚拟用户名)(手动添加,默认不包含这些设定) 认证安装Berkeley DB包 1yum install db4 db4-utils 再创建用户信息文件/etc/vsftpd/vuser_passwd.txt,奇数行用户名,偶数行密码 1234curry123456curry30wzx123 生成虚拟用户认证的db文件(此步骤很关键,以后每次在/etc/vsftpd/vuser_passwd.txt新配置一个用户,都有再生成一遍db文件) 1db_load -T -t hash -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db 随后，编辑认证文件/etc/pam.d/vsftpd，全部注释掉原来语句，新增下面配置 12auth required pam_userdb.so db=/etc/vsftpd/vuser_passwdaccount required pam_userdb.so db=/etc/vsftpd/vuser_passwd 最后，创建虚拟用户配置文件 12mkdir /etc/vsftpd/vuser_conf/vi /etc/vsftpd/vuser_conf/curry30 //文件名等于vuser_passwd.txt里面的账户名，否则下面设置无效 内容如下,要注意所有配置的文件都不要有空格,不然怎么都会连不上的。。。而且找不到原因，那是相当蛋疼的。。。 1234567local_root=/homewrite_enable=YESanon_umask=022anon_world_readable_only=NOanon_upload_enable=YESanon_mkdir_write_enable=YESanon_other_write_enable=YES 设置Selinux 12setsebool -P ftp_home_dir=1 //设置ftp可以使用home目录sersebool -P allow_ftpd_full_access=1 //设置ftp用户可以有所有权限 设置curry30根目录权限 1chmod R 777 /home //因为我的网站根目录在home下 有可能进行防火墙的设置 打开21端口 vim/etc/sysconfig/iptables 1-A INPUT -m state --state NEW -m tcp -p -dport 21 -j ACCEPT 重启防火墙 1service iptables restart 重启vsftpd生效 1service vsftpd restart]]></content>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ratchet]]></title>
    <url>%2F2018%2F12%2F23%2Fratchet%2F</url>
    <content type="text"><![CDATA[首先在本地搭建好chat_client,chat_server, chat_website 然后因为mysql5.7以上date类型不再支持0000-00-00的格式,所以在执行导入sql文件后,进入msql控制台,执行如下语句 1set GLOBAL sql_mode =''; 为了方便调试可以在chat_website上进行相应的调试 如果本地测试需要直接回复信息,可去掉发信息的条件限制,在 chatserver/app/models/ChatUser.php的canSendMessage方法中直接返回 1return true; 在chat_website上本地测试 (1)更改chat_website/index.php 约131行: 1echo "&lt;script&gt;location.href = '/';&lt;/script&gt;" (2)注释chat_website/index.php 约65,66行 并且复制一条新的chatJsUrl 更换成自己本地搭建chatclient的虚拟域名地址如下: 1var chatJsUrl = "http://chatsmall.com/js/"; //curry (3)更改chat_client端代码chat_small/js/client.chat.main.js 18,19行注释掉 并去掉21,22行的注释,也就是将serverclient的本机虚拟域名替换,并且为了纠正路径问题,要去掉该文件中所有的chat_client路径 1var chatIP = "chatsmall.com"; // Test 1var chatUrl = "http://" + chatIP; // Test (4)更改chat_client端代码chat_small/index.php并且修改242行的chatIP为自己本机ip并且修改244行apiUrl为自己本地的chatserver的虚拟域名 1var chatIP = "127.0.0.1"; // Test 1var apiUrl = "http://chatserver.com"; // Test (5)更改chat_client端代码chat_small/js/scripts.js的115行注释掉 并且取消116行的注释 1//webSocket = new WebSocket("wss://" + chatIP + "/wss"); // Live 1webSocket = new WebSocket("ws://" + chatIP + ":" + port); // Test 在安装成功之后,启动服务端的时候会有如下报错: 1stream_set_blocking() expects parameter 1 to be resource, null given 解决方法就是修改php.ini的参数,找到disable_functions = 将proc_open 和stream_socket_server 两个参数删除,然后重启php]]></content>
      <tags>
        <tag>websockets</tag>
      </tags>
  </entry>
</search>
